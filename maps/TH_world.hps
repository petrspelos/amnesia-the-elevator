void OnEnter()
{
    PreloadSound("metal_walk.snt");
    PreloadSound("metal_run.snt");
    PreloadSound("TH_elevator_amb_loop.snt");
    PreloadSound("TH_elevator_intro.snt");
    PreloadSound("TH_elevator_door_open.snt");
    PreloadSound("TH_elevator_door_close.snt");
    PreloadSound("ui_terror_meter.snt");
    PreloadSound("scare_steps_big.snt");
    PreloadSound("scare_slam_door.snt");
    PreloadSound("scare_tingeling.snt");
    PreloadSound("scare_animal_squeal.snt");
    PreloadSound("critter_rat_scare.snt");
    PreloadSound("scare_wings.snt");
    PreloadSound("scare_wood_creak_scuf.snt");
    PreloadSound("scare_baby_cry.snt");
    PreloadSound("unlock_door.snt");
}

void OnStart()
{
    RegisterModularJumpscares();
    RegisterModularHurtscares();
    RegisterModularKeys();
    RegisterModularWalkRun();
    ElevatorIntro();
    AddEntityCollideCallback("Player", "CloseElevatorArea", "CloseElevator", true, 0);
    GiveItemFromFile("lantern", "lantern.ent");
}

void CloseElevator(string parent, string child, int state)
{
    CheckPoint("", "OutsideElevator", "", "", "");
    PlayPropAnimation("ElevatorDoor", "Close", 0.0f, false, "");
    PlaySoundAtEntity("", "TH_elevator_door_close.snt", "ElevatorDoor", 0.0f, false);
    SetEntityActive("DoorBlockBox", true);
}

// ============================================================================
//  THE ELEVATOR INTRO
// ============================================================================
void ElevatorIntro(string t)
{
    int stage = GetLocalVarInt("ElevatorIntro");
    AddLocalVarInt("ElevatorIntro", 1);
    float delay = 0.0f;

    if(stage == 0)
    {
        FadeOut(0.0f);
        SetPlayerActive(false);
        PlaySoundAtEntity("amb", "TH_elevator_amb_loop.snt", "Player", 5.0f, false);
        delay = 8.0f;
    }
    else if(stage == 1)
    {
        PlayMusic("TH_elevator_music.ogg", false, 1.0f, 1.0f, 1, false);
        delay = 7.0f;
    }
    else if(stage == 2)
    {
        StartScreenShake(0.001f, 10.0f, 0.0f, 0.1f);
        FadeIn(2.0f);
        SetPlayerActive(true);
        delay = 10.0f;
    }
    else if(stage == 3)
    {
        StopSound("amb", 0.0f);
        PlayGuiSound("elevator_stop.ogg", 1.0f);
        GiveSanityDamage(1.0f, true);
        StopMusic(0.0f, 1);
        StartScreenShake(0.1f, 1.0f, 0.0f, 0.1f);
        delay = 2.0f;
    }
    else if(stage == 4)
    {
        PlaySoundAtEntity("", "TH_elevator_intro.snt", "Player", 0.0f, false);    
        delay = 5.0f;
    }
    else if(stage == 5)
    {
        PlayPropAnimation("ElevatorDoor", "Open", 0.0f, false, "");
        PlaySoundAtEntity("", "TH_elevator_door_open.snt", "ElevatorDoor", 0.0f, false);
        PlaySoundAtEntity("amb", "TH_world_amb_loop.snt", "Player", 4.0f, false);
        StartRandomAmb();
        delay = 4.0f;
    }
    else if(stage == 6)
    {
        SetEntityActive("DoorBlockBox", false);
    }
    else
    {
        return;
    }

    AddTimer("", delay, "ElevatorIntro");
}

void ElevatorIntro() { ElevatorIntro(""); }

// ============================================================================
//  WALK - SCARE EVENT 1
// ============================================================================
void BruteWalkEvent1(string areaBase)
{
    int stage = GetLocalVarInt("BruteWalkEvent1" + areaBase);
    AddLocalVarInt("BruteWalkEvent1" + areaBase, 1);
    float delay = 0.0f;

    int iterationNumber = GetLocalVarInt("Event1Iteration" + areaBase);
    AddLocalVarInt("Event1Iteration" + areaBase, 1);

    if(stage <= GetEntityCountByBase(areaBase))
    {
        PlaySoundAtEntity("", "metal_walk.snt", areaBase + iterationNumber, 0.0f, false);    
        delay = 1.5f;
    }
    else
    {
        return;
    }

    AddTimer(areaBase, delay, "BruteWalkEvent1");
}

void StartBruteWalkEvent1(string areaBase) { BruteWalkEvent1(areaBase); }

// ============================================================================
//  RUN - SCARE EVENT 2
// ============================================================================
void BruteRunEvent2(string areaBase)
{
    int stage = GetLocalVarInt("BruteRunEvent2");
    AddLocalVarInt("BruteRunEvent2", 1);
    float delay = 0.0f;

    int iterationNumber = GetLocalVarInt("Event2Iteration");
    AddLocalVarInt("Event2Iteration", 1);

    if(stage < 8)
    {
        PlaySoundAtEntity("", "metal_run.snt", areaBase + "_" + iterationNumber, 0.0f, false);    
        delay = 0.65f;
    }
    else
    {
        return;
    }

    AddTimer(areaBase, delay, "BruteRunEvent2");
}

void StartBruteRunEvent2(string areaBase) { SetLocalVarInt("BruteRunEvent2", 0); SetLocalVarInt("Event2Iteration", 0); BruteRunEvent2(areaBase); }

// ============================================================================
//  TERROR - SCARE EVENT 3
// ============================================================================
void StartTerror()
{
    PlaySoundAtEntity("terror", "ui_terror_meter.snt", "Player", 0.0f, false);
    AddTimer("", RandFloat(2.0f, 7.0f), "StopTerror");
}

void StopTerror(string t)
{
    StopSound("terror", 0.5f);
}

// ============================================================================
//  RANDOM SOUDS
// ============================================================================
string GetRandomSound()
{
    switch(RandInt(1, 8))
    {
        case 1: return "scare_steps_big.snt"; break;
        case 2: return "scare_slam_door.snt"; break;
        case 3: return "scare_tingeling.snt"; break;
        case 4: return "scare_animal_squeal.snt"; break;
        case 5: return "critter_rat_scare.snt"; break;
        case 6: return "scare_wings.snt"; break;
        case 7: return "scare_wood_creak_scuf.snt"; break;
        case 8: return "scare_baby_cry.snt"; break;
    }

    return "";
}

string GetRandomArea(string base)
{
    int max = GetEntityCountByBase(base);
    if(max == 0) { return ""; }

    return base + RandInt(1, max);
}

int GetEntityCountByBase(string base)
{
    int count = 0;
    while(GetEntityExists(base + (count + 1)))
    {
        count++;
    }

    return count;
}

void StartRandomAmb()
{
    SetLocalVarInt("StopRandSndFlag", 0);
    PlayRandSound("");
}

void StopRandomAmb()
{
    SetLocalVarInt("StopRandSndFlag", 1);
}

void PlayRandSound(string timer)
{
    StopSound("randSound", 0.5f);
    
    string sound = GetRandomSound();
    string area = GetRandomArea("ScareSound_");

    PlaySoundAtEntity("randSound", sound, area, 0.0f, false);

    if(GetLocalVarInt("StopRandSndFlag") != 0) { return; }

    AddTimer("", RandFloat(1.0f, 3.0f), "PlayRandSound");

    if(PercentageChance(5)) { StartTerror(); }
}

bool PercentageChance(int percent)
{
    return RandInt(1, 100) < percent;
}

// ============================================================================
//  MODULAR JUMPSCARE SYSTEM
// ============================================================================
void RegisterModularJumpscares()
{
    string areaBase = "Jumpscare_";
    int count = 1;
    while(GetEntityExists(areaBase + count))
    {
        AddEntityCollideCallback("Player", areaBase + count, "RunModularJumpscare", true, 0);
        count++;
    }
}

void RunModularJumpscare(string a, string area, int s)
{
    string entityBase = area + "_entity_";
    SetEntityActiveByGroup(entityBase, true);
    PlayGuiSound("ScareGui_" + RandInt(1, 7) + ".ogg", 1.0f);
    GiveSanityDamage(1.0f, true);
    AddTimer(entityBase, 1.0f, "DisableJumpscare");
}

void SetEntityActiveByGroup(string base, bool active)
{
    for(int i = 0; i < 10; i++)
    {
        SetEntityActive(base + i, active);
        SetPropHealth(base + i, 0.0f);
    }
}

void DisableJumpscare(string base)
{
    SetEntityActiveByGroup(base, false);
}

// ============================================================================
//  MODULAR HURTSCARE SYSTEM
// ============================================================================
void RegisterModularHurtscares()
{
    string areaBase = "Hurtscare_";
    int count = 1;
    while(GetEntityExists(areaBase + count))
    {
        AddEntityCollideCallback("Player", areaBase + count, "RunModularHurtscare", true, 0);
        count++;
    }
}

void RunModularHurtscare(string a, string b, int s)
{
    GivePlayerDamage(5.0f, "Claws", true, false);
}

// ============================================================================
//  MODULAR KEY SYSTEM
// ============================================================================
void RegisterModularKeys()
{
    string areaBase = "Key_";
    int count = 1;
    while(GetEntityExists(areaBase + count))
    {
        AddUseItemCallback("", areaBase + count, "Door_" + count, "UnlockDoor", true);
        count++;
    }
}

void UnlockDoor(string item, string entity)
{
    PlaySoundAtEntity("", "unlock_door.snt", entity, 0.0f, false);
    RemoveItem(item);
    SetSwingDoorLocked(entity, false, true);
}

// ============================================================================
//  MODULAR WALK/RUN SYSTEM
// ============================================================================
void RegisterModularWalkRun()
{
    string areaBase = "FakeWalk_";
    int count = 1;
    while(GetEntityExists(areaBase + count))
    {
        AddEntityCollideCallback("Player", areaBase + count, "BruteWalkEvent1Proxy", true, 0);
        count++;
    }
}

void BruteWalkEvent1Proxy(string a, string areaBase, int state)
{
    BruteWalkEvent1(areaBase + "_step_");
}
